@startuml

class AIBoat
abstract class Boat
class BoatRace
class CollisionBounds
interface CollisionObject
abstract class GameObject
abstract class MoveableObject
abstract class Obstacle
abstract class PowerUp
class PowerUpSpeed
class PowerUpHealth
class PowerUpRotation
class PowerUpDrag
class PowerUpEnergy
class ObstacleBranch
class ObstacleDuck
class ObstacleFloatingBranch
class ObstacleLaneWall
class PixelBoat
class PlayerBoat
class SceneResultsScreen
interface Scene
class SceneDifficulty
class SceneMainGame
class SceneOptionsMenu
class SceneStartScreen
class SceneTutorial
class SceneAwardScreen
class SceneGameOver
class SceneLoadScreen
class SceneSaveScreen
interface Serializable
class GameState
class SerializableGameObject 



GameObject <|-- MoveableObject

MoveableObject <|-- Obstacle
CollisionObject <|-- Obstacle
Obstacle <|-- ObstacleBranch
Obstacle <|-- ObstacleDuck
ObstacleBranch <|-- ObstacleFloatingBranch
Obstacle <|-- ObstacleLaneWall

MoveableObject <|-- PowerUp
CollisionObject <|-- PowerUp
PowerUp <|-- PowerUpDrag
PowerUp <|-- PowerUpHealth
PowerUp <|-- PowerUpEnergy
PowerUp <|-- PowerUpRotation
PowerUp <|-- PowerUpSpeed

MoveableObject <|-- Boat
CollisionObject <|-- Boat
Boat <|-- PlayerBoat
Boat <|-- AIBoat

Scene <|-- SceneMainGame
Scene <|-- SceneOptionsMenu
Scene <|-- SceneStartScreen
Scene <|-- SceneTutorial
Scene <|-- SceneDifficulty
Scene <|-- SceneAwardScreen
Scene <|-- SceneGameOver
Scene <|-- SceneResultsScreen
Scene <|-- SceneLoadScreen
Scene <|-- SceneSaveScreen

Serializable <|-- GameState
Serializable <|-- SerializableGameObject


PixelBoat "1" *-- "1" SceneMainGame
PixelBoat "1" *-- "1" SceneOptionsMenu
PixelBoat "1" *-- "1" SceneStartScreen
PixelBoat "1" *-- "1" SceneTutorial
PixelBoat "1" *-- "1" SceneLoadScreen

BoatRace "1" *-- "0..*" Obstacle
BoatRace "1" *-- "0..*" PowerUp

SceneMainGame "1" *-- "1" BoatRace
SceneMainGame "1" *-- "1" SceneResultsScreen
SceneMainGame "1" *-- "1..*" Boat
SceneMainGame "1" *-- "0..*" GameState
SceneMainGame "1" *-- "1" SceneSaveScreen

CollisionObject "1" *-- "1" CollisionBounds

GameState "1" *-- "1..*" "SerializableGameObject"
GameState "1" *-- "1" "ObjectType"

class PixelBoat{
  #all_scenes:Scene[0..*]
  #batch:SpriteBatch
  #scene_id:Integer
  
  create():void
  render():void
  dispose():void
  resize(width:Integer, height:Integer):void
}

interface Scene{
  draw(batch:SpriteBatch):void
  update():int;
  resize(width:integer, height:integer):void

}

class SceneDifficulty{
  #diffLevel:int
  #bg:Texture
  #bgSprite:Sprite
  #hard:Texture
  #hardSprite:Texture
  #med:Texture
  #medSprite:Sprite
  #easy:Texture
  #easySprite:Sprite
  #ready:Texture
  #readySprite:Sprite
  #fillViewport:Viewport
  #fillCamera:OrthographicCamera
  
  finalize():void
  
}

class SceneGameOver{
  #bg:Texture
  #bgSprite:Sprite
  #Restart:Texture
  #RestartSprite:Sprite
  #fill_viewport:Viewport
  #fill_camera:OrthographicCamera
  
  finalize():void
}

class SceneAwardScreen{
  #bg:Texture
  #bgSprite:Sprite
  #Restart:Texture
  #RestartSprite:Sprite
  #boats:Boat[0..n]
  #fill_viewport:Viewport
  #fill_camera:OrthographicCamera
  
  findWinners():Boat[3]
  finalize():void
}

class SceneTutorial{
  #bg:Texture
  #bg_sprite:Sprite
  #fill_viewport:Viewport
  #fill_camera:OrthographicCamera

  finalize():void
  
}

class SceneStartScreen{
  #bg:Texture
  #bg_sprite:Sprite
  #play:Texture
  #play_hovered:Texture
  #play_sprite:Sprite
  #options:Texture
  #options_hovered:Texture
  #options_sprite:Sprite
  #fill_viewport:Viewport
  #fill_camera:OrthographicCamera

  finalize():void

}

class SceneOptionsMenu{
  #bg:Texture
  #bg_sprite:Sprite
  #full:Texture
  #full_sprite:Sprite
  #full_check_yes:Texture
  #full_check_no:Texture
  #full_check_sprite:Sprite
  #accel:Texture
  #accel_sprite:Sprite
  #left:Texture
  #left_sprite:Sprite
  #right:Texture
  #right_sprite:Sprite
  #back:Texture
  #back_hovered:Texture
  #back_sprite:Sprite
  #fill_viewport:Viewport
  #fill_camera:OrthographicCamera

  finalize():void
}

class SceneMainGame{
  #leg_number:integer
  #boats_per_race:integer
  #groups_per_game:integer
  #player:PlayerBoat
  #all_boats:List<Boat>
  #bg:Texture
  #race:BoatRace
  #results:SceneResultsScreen

  finalize():void
  saveGame(saveName:String):void
  restoreGame(saveName:String):void
}

class SceneLoadScreen{
  #stage:Stage
  #shouldGoToMenu:boolean
  #shouldInitialize:boolean
  #shouldLoadGame:boolean
  #shouldDelete:boolean
  #parent:PixelBoat
  #choose:SelectBox<String>
  #prefs:Preferences
  #layout:Table
  #bg:Texture
  #bgSprite:Sprite
  
  finalize():void
}

class SceneSaveScreen{
  #stage:Stage
  #prefs:Preferences
  #bg:Texture
  #bgSprite:Sprite
  #saveNameInput:TextArea
  #layout:Table
  #shouldSave:boolean
  #shouldCancel:boolean
  #shouldInitialize:boolean
  #parent:PixelBoat
  
  finalize():void
}

class BoatRace{
  #boats:Boat[0..n]
  #font:BitmapFont
  #lane_sep:Texture
  #start_banner:Texture
  #bleachers_l:Texture
  #bleachers_r:Texture
  #obstacles:CollisionObject[0..n]
  #powerups:CollisionObject[0..n]
  #start_y:integer
  #end_y:integer
  #lane_width:integer
  #penality_per_frame:1
  #is_finished:boolean
  #total_frames:long

  getLaneCenter(boat_index:integer):integer
  runstep():void
  isfinished():boolean
  getSprites():Sprite[0..n]
  draw(batch:SpriteBatch):void
  drawTimeDisplay(batch:SpriteBatch,b:Boat,label_text:String,time:long,x:float,y:float):void
  drawLegTimeDisplay(batch:SpriteBatch,b:Boat):void
}

class SceneResultsScreen{
  #boats:Boat[0..n]
  
  update():boolean
  draw():void
}

abstract class GameObject {
  #texture:Texture
  #sprite:Sprite
  #is_shown:boolean
  #animation_regions:TextureRegion[0..n]

  initialise(x:integer,y:integer,w:integer,
  h:integer,texture_path:final String):void
  finalize():void
  isShown():boolean
  getBounds():CollisionBounds
  setAnimationFrame(i:integer):void
}

abstract class MoveableObject{
  #max_speed:float
  #speed:float
  #drag:float
  #acceleration:float
  #rotation_speed:float

  turn(amound:integer):void
  move(distance:float):void
  updatePosition():void
  accelerate():void
  reset_motion():void 
}

Interface CollisionObject{
  hasCollided():void
  getBounds():CollsionBounds
  isShown():boolean
}

abstract class Boat{
  #name:String
  #durability:float
  #durability_per_hit:float
  #stamina:float
  #stamina_usage:float
  #leg_times:Long[0..n]
  #start_time:long
  #end_time:long
  #frames_raced:long
  #time_to_add:long
  #frames_to_animate:int
  #current_animation_frame:int
  #frames_elapsed:int
  #has_finished_leg:boolean
  #has_started_leg:boolean
  
  hasCollided():void
  hasCollidedSpeed():void
  hasCollidedHealth():void
  hasCollidedEnergy():void
  hasCollidedRotation():void
  hasCollidedDrag():void
  addFrameRaced(frames_raced:long):void
  getCalcTime():long
  setLegTime():void
  checkCollisions(object:CollisionObject):void
  reset():void
  getBestTime():long
  
}

class AIBoat{
  #numberOfRays:Float
  #rangeAngleRange:Float
  #rayAngle:Foat
  #rayStepSize:Float
  #regen:Boolean
  
  initialize():void
  updatePosition(collideables:CollisionObject[0..n]):void
  get_ray_fire_point():Vector2
  check_turn(collidables:CollisionObject[0..n]):void
}

class PlayerBoat{
  #camera:OrthographicCamera
  #stamina_texture:Texture
  #durability_texture:Texture
  #stamina_bar:Sprite
  #durability_bar:Sprite
  #ui_bar_width:int

  finalize():void
  initialise():void
  updatePosition():void
  getUISprites():Sprite[0..n]
  resetCameraPos():void
  updaetUISprites():void 
  hasDied():boolean
}

abstract class Obstacle{
  hasCollided():void
}

class ObstacleLaneWall{
  {static}+textureHeight:int
}

class ObstacleDuck{
  
}

class ObstacleBranch{

}

class ObstacleFloatingBranch{

}

class CollisionBounds{
  #bounds:Shape2D[0..n]
  #rotation:float
  #origin:Vector2
  
  getShapes():Shape2D[0..n]
  getPolygon(r1:Rectangle, rot1:float, o1:Vector2):Polygon
  addBound(new_bound:Shape2D):void
  isColliding(collider:CollisionBounds):boolean
  rectOnRectCollides(r1:Rectangle, rot1:float, o1:Vector2, r2:Rectangle, rot2:float, o2:Vector2):boolean

}

class GameState{
  #serialVersionUID:long
  #gameObjects:List<SerializableGameObject>
  #playerBoatIndex:int
  #legNumber:int
  #lastRun:boolean
  #isFinished:boolean
  #totalFrames:long
}

enum ObjectType{
  Boat
  DUCK
  BRANCH
  FLOATING_BRANCH
  LANE_WALL
  POWERUP_SPEED
  POWERUP_ENERGY
  POWERUP_HEALTH
}

class SerializableGameObject{
  #serialVersionUID:long
  #x:float
  #y:float
  #width:float
  #height:float
  #rotation:float
  #ObjectType:type
  #speed:float
  #is_shown:Boolean
  #name:String
  #durability:float
  #durability_per_hit:float
  #stamina:float
  #stamina_usage:float
  #stamina_regen:float
  #leg_times:List<long>
  #start_time:long
  #end_time:long
  #frames_raced:long
  #time_to_add:long
  #time_since_start:long
  #time_leg:long
  #frames_to_animate:int
  #current_animation_frame:int
  #frames_elapsed:int
  #has_finished_leg:boolean
  #has_started_leg:boolean
}

abstract class PowerUp{
  hasCollided():void
}

class PowerUpSpeed{

}

class PowerUpDrag{

}

class PowerUpEnergy{

}

class PowerUpHealth{

}

class PowerUpRotation{

}

@enduml